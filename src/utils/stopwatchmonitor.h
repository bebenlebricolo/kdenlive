#pragma once

#include <cmath>
#include <iomanip>
#include <iostream>
#include <sstream>

// Performances logging feature enabled,
// All macros below will be interpreted.
#ifdef PERF_LOGGING

/**
 * @brief Declares a single stopwatch whose name is given as a parameter
 * @param[in] varname : name of the variable (i.e. symbol) that'll be generated by C preprocessor.
 */
#define DECL_STOPWATCH(varname) std::chrono::_V2::system_clock::time_point varname;

/**
 * @brief Retrieves the current time using system clock.
 * Requires a valid stopwatch as a parameter
 * @param[in] stopwatch : stopwatch used in the codebase (std::chrono::_V2::system_clock::time_point)
 */
#define STOPWATCH_TIME_NOW(stopwatch) stopwatch = std::chrono::system_clock::now();

/**
 * @brief defines an automatic log template, based on file and call site.
 */
#define LOG_LOCATION_TEMPLATE QFileInfo(__FILE__).baseName().toStdString() << "::" << __func__ << "():line" << __LINE__ << ": "

/**
 * @brief Small utility that logs the current file, function and line being processed with a custom message.
 * This is only usable in a monothread architecture as it talks to the console. Not thread safe.
 * NOTE : this will be removed for a better logging approach, it's a temporary tool and will probably conflict
 * with the entire world with such a simple macro name "LOG".
 */
#define LOG_STW(msg) std::cout << "[STOPWATCH]:" << LOG_LOCATION_TEMPLATE << msg << std::endl;

/**
 * @brief Logs duration in seconds between start and end stopwatches
 * This is used to monitor perfs within the codebase without having to use heavy profilers,
 * and this allows to give a quite neat approximation of time passed between two points.
 */
#define LOG_DURATION(start, end)                                                                                                                               \
    {                                                                                                                                                          \
        /* Convert Nanoseconds to seconds  */                                                                                                                  \
        std::stringstream stream;                                                                                                                              \
        stream << "Elapsed time: " << std::fixed << std::setprecision(2) << ((double)((end - start).count()) / 1000000000) << "s";                             \
        LOG_STW(stream.str());                                                                                                                                 \
    }

/**
 * @brief Logs the current duration using the std::chrono::system_clock::now() to get the current time.
 * @param[in] start : starting point of the code being monitored (has to be a std::chrono::_V2::system_clock::time_point)
 */
#define LOG_DURATION_NOW(start) LOG_DURATION(start, std::chrono::system_clock::now())

#else
// Totally remove the generated code, macros won't leave a trace in the codebase.
#define DECL_STOPWATCH(varname)
#define STOPWATCH_TIME_NOW(stopwatch)
#define LOG_LOCATION_TEMPLATE
#define LOG_DURATION(start, end)
#define LOG_DURATION_NOW(start)
#define LOG_STW(msg)

#endif // PERF_LOGGING conditionals